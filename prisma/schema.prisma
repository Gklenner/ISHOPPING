// This is your Prisma schema file

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(cuid())
  name      String
  email     String    @unique
  password  String
  role      Role      @default(USER)
  orders    Order[]
  reviews   Review[]
  wishlist  Wishlist[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Product {
  id          String    @id @default(cuid())
  name        String
  description String
  price       Float
  category    String
  stock       Int
  status      Status    @default(DRAFT)
  image       String
  rating      Float     @default(0)
  isNew       Boolean   @default(false)
  discount    Float?
  sku         String    @unique
  variants    Variant[]
  orders      OrderItem[]
  reviews     Review[]
  wishlist    Wishlist[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Variant {
  id        String    @id @default(cuid())
  size      String
  color     String
  stock     Int
  product   Product   @relation(fields: [productId], references: [id])
  productId String
  orders    OrderItem[]
}

model Order {
  id              String    @id @default(cuid())
  user            User      @relation(fields: [userId], references: [id])
  userId          String
  items           OrderItem[]
  status          OrderStatus @default(PENDING)
  total           Float
  shippingAddress Address
  paymentInfo     Payment
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model OrderItem {
  id        String   @id @default(cuid())
  order     Order    @relation(fields: [orderId], references: [id])
  orderId   String
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  variant   Variant? @relation(fields: [variantId], references: [id])
  variantId String?
  quantity  Int
  price     Float
}

model Review {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  rating    Int
  comment   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Wishlist {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  createdAt DateTime @default(now())

  @@unique([userId, productId])
}

model Address {
  id      String @id @default(cuid())
  street  String
  city    String
  state   String
  zip     String
  country String
  Order   Order  @relation(fields: [orderId], references: [id])
  orderId String @unique
}

model Payment {
  id            String        @id @default(cuid())
  provider      String
  transactionId String
  status        PaymentStatus
  Order         Order         @relation(fields: [orderId], references: [id])
  orderId       String        @unique
}

enum Role {
  USER
  ADMIN
}

enum Status {
  ACTIVE
  DRAFT
}

enum OrderStatus {
  PENDING
  PROCESSING
  COMPLETED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
}